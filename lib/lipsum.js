// Generated by CoffeeScript 1.3.3
/*
# Lorem Ipsum Wrapper
*/

var Lipsum, Parser, Service, events,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Service = require('./service');

Parser = require('./parser');

events = require('events');

Lipsum = (function(_super) {

  __extends(Lipsum, _super);

  function Lipsum() {
    this.serviceCallback = __bind(this.serviceCallback, this);

    this.parserSuccessCallBack = __bind(this.parserSuccessCallBack, this);

    this.getText = __bind(this.getText, this);
    this.parser = new Parser();
    this.service = new Service();
  }

  Lipsum.prototype.defaults = {
    amount: 5,
    what: 'paras',
    start: 'no'
  };

  Lipsum.prototype.getText = function(callback, opts) {
    var prop, _i, _len, _ref;
    if (!opts) {
      opts = this.defaults;
    } else {
      _ref = this.defaults;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (opts[prop] == null) {
          opts[prop] = this.defaults[prop];
        }
      }
    }
    this.service.get("json", this.serviceCallback, opts);
    return this.once('lipsum', function(txt) {
      return callback(txt);
    });
  };

  Lipsum.prototype.parserSuccessCallBack = function(result) {
    return this.emit('lipsum', result.feed.lipsum);
  };

  Lipsum.prototype.parserErrorCallBack = function(err) {
    throw new Error("Parser Error: " + err.message);
  };

  Lipsum.prototype.serviceCallback = function(text) {
    return this.parser.feed(text).parse(this.parserSuccessCallBack, this.parserErrorCallBack);
  };

  return Lipsum;

})(events.EventEmitter);

if (typeof module !== "undefined" && module !== null) {
  module.exports = Lipsum;
}
