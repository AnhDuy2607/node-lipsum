// Generated by CoffeeScript 1.3.3
/*
  Parser for xml and json. Detects whether the file is XML or JSON and parses it accordingly. 
  Parsing within the file provides the advantage of decoupling calls to the server with calls
  to the parser, as it is able to be agnostic to the format received. It
  cannot, however, parse HTML (nor should it have to).
*/

var LipsumParser, XMLParser,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

XMLParser = require('xml2js').Parser;

LipsumParser = (function(_super) {

  __extends(LipsumParser, _super);

  function LipsumParser(payload) {
    this._attemptParseXML = __bind(this._attemptParseXML, this);

    this.parse = __bind(this.parse, this);

    this.feed = __bind(this.feed, this);
    this._xmlParser = new XMLParser();
    this._payload = payload != null ? payload : null;
    this.parsedOutput = null;
  }

  LipsumParser.prototype.feed = function(payload) {
    this.parsedOutput = null;
    return this._payload = payload;
  };

  LipsumParser.prototype.parse = function(successCallback, errCallback) {
    var xmlSuccCallback,
      _this = this;
    if (this.parsedOutput != null) {
      return this.parsedOutput;
    }
    this.parsedOutput = this._attemptParseJSON(this.payload);
    if (!(this.parsedOutput != null)) {
      xmlSuccCallback = function(result) {
        return _this.parsedOutput = result;
      };
      return this._attemptParseXML(xmlSuccCallback, errCallback);
    }
  };

  LipsumParser.prototype._attemptParseJSON = function() {
    try {
      return JSON.parse(payload);
    } catch (SyntaxError) {

    }
  };

  LipsumParser.prototype._attemptParseXML = function(onSuccess, onError) {
    return this._xmlParser.parseString(payload, function(err, result) {
      if (err) {
        if (onError != null) {
          onError(err);
        }
        return;
      }
      return onSuccess(result);
    });
  };

  return LipsumParser;

})(events.EventEmitter);
